// Code generated by go-bindata. DO NOT EDIT.
// sources:
// vscode.bat (1kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vscodeBat = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xc1\x6e\xd3\x40\x14\xbc\xfb\x17\xb8\x0c\x95\xd2\x34\x12\xb6\x5b\x90\x10\x42\xe2\x50\x85\x84\x56\x0a\x09\x4a\xaa\x70\x5e\xdb\x2f\xf6\xd2\xf5\xae\xd9\x7d\x1b\x37\x7c\x3d\xf2\x3a\x89\x4b\x91\xb8\x70\xde\x37\xf3\x66\x66\xe7\xcd\xa6\x77\x2b\xac\xe6\xf3\x28\xb2\x54\x63\x5a\x51\xfe\x08\xb9\xc3\x76\x83\xa9\x29\x08\xd2\x41\x6a\xc7\x42\x29\x2a\x10\xf7\xef\xae\x1b\x90\xdc\xbd\x80\x2b\x42\x23\xb8\x0a\xe8\xa5\x61\xdc\x5c\x5f\x8f\xe0\xbc\x25\x64\xe4\x18\xad\x38\x40\x38\x70\x25\xf5\xe3\x99\xc9\x42\x28\x65\x5a\x87\x83\xf1\x0c\x36\x58\xae\x1e\xd0\x78\x86\xe4\x13\xe7\xe8\xdb\xed\xc3\xdd\x28\x9a\xde\x2e\x16\x68\x2b\xb2\x84\xf4\x27\x72\x53\x50\x74\x3f\xc7\x6c\xbd\x5e\xad\x17\xb3\xed\x6c\x81\x1b\x5c\x45\x00\x10\x6c\x6c\xa5\xf3\x42\x61\xc3\xbe\x90\xe6\xac\x5f\x1b\x1e\x3c\x24\xc3\xf4\x67\xd3\x6a\x65\x44\x21\x75\xf9\x4c\xd9\xce\x9a\x1a\x15\x73\xe3\x3e\xa6\xe9\xde\x75\x2b\x63\xdf\x14\x82\x29\x11\xbf\xbc\xa5\x96\x32\x27\x99\x5c\xa2\x89\x53\x25\x98\x1c\xa7\xad\xd4\xef\xde\xa6\x8e\x45\xa6\x28\x0a\x0b\xba\x34\x4e\xfc\xc1\xcf\x4e\x2a\xc2\x25\xb4\xa8\xa9\x73\xb9\xdd\x74\xea\x36\xc4\xbe\x49\xe8\x89\x60\x49\x09\x96\x7b\xea\xc2\xe0\x4a\x3a\x58\xaf\x75\x27\x2c\x13\x9c\x57\x01\x1d\x78\x43\x1e\x8d\x69\xc9\xba\x8a\x94\x42\x3c\x35\x75\x2d\x74\x81\x8b\xab\x25\xb5\xf1\x2a\xfb\x41\x39\x63\x49\x9c\x7c\xa7\x6c\xaa\x24\x69\x9e\x24\x27\x21\x73\xa9\xe8\x6a\xfc\x1f\xde\xc6\x6f\x30\x7e\xa1\x7c\x3c\xb9\x18\x1c\xaf\x7d\xff\x79\x43\x9a\x97\x20\x1d\xca\x20\x19\x85\xa1\xfe\x33\x94\xf0\x3a\xaf\x20\x76\x4c\xf6\x34\x7b\xe6\x38\xc9\x2b\x25\x57\x3e\x4b\x72\x53\xa7\x5f\x65\x6e\x8d\x33\x3b\x3e\x6a\x4e\xa5\x73\x9e\x5c\xfa\xe1\xfd\xf5\x19\x16\x82\x79\x99\x6a\xba\x27\x7b\x70\x52\x91\xe6\x21\xbd\xbf\x86\xfa\x01\xa4\x35\xd9\x92\x58\xb8\x47\xf7\xe9\xb5\xf5\x3a\x94\x6d\xd2\x9f\xc5\x7d\x2f\x12\x5f\x8c\x12\xba\x3c\x1f\x07\x3d\x31\x69\x27\x8d\xee\x7b\xda\x21\x10\xc7\x47\x47\xf1\xf9\x15\x65\x80\x25\xa5\x89\x42\xf1\x46\x43\x7f\x47\xd1\xbf\xfa\xfc\xea\x56\x59\x12\xc5\x01\x95\xd8\xd3\x69\xf9\x40\xfb\xfc\x30\xbd\xa3\xa3\xb3\xae\x42\xbe\x29\xad\xf8\x43\xe0\xe4\x77\x00\x00\x00\xff\xff\x10\xce\xdf\x65\xe8\x03\x00\x00")

func vscodeBatBytes() ([]byte, error) {
	return bindataRead(
		_vscodeBat,
		"vscode.bat",
	)
}

func vscodeBat() (*asset, error) {
	bytes, err := vscodeBatBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vscode.bat", size: 1000, mode: os.FileMode(0644), modTime: time.Unix(1608267015, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0x85, 0x5e, 0x21, 0xda, 0x83, 0x7a, 0xd2, 0xf4, 0xd6, 0xdf, 0x9e, 0xf2, 0xfa, 0xa5, 0x43, 0xfb, 0x54, 0x38, 0x5a, 0x57, 0xfe, 0xef, 0x2c, 0xdd, 0xea, 0x76, 0x2c, 0xe3, 0x83, 0xf6, 0xd6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vscode.bat": vscodeBat,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vscode.bat": {vscodeBat, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
